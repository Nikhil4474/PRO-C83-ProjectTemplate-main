{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Nikhil\\\\Downloads\\\\PRO-C83-ProjectTemplate-main\\\\PRO-C83-ProjectTemplate-main\\\\node_modules\\\\@react-navigation\\\\native\\\\dist\\\\Scrollables.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from \"./createNavigationAwareScrollable\";\nimport invariant from \"./utils/invariant\";\nvar WrappedScrollView;\n\nif (Platform.OS === 'android') {\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  var onRefresh = props.onRefresh;\n\n  if (onRefresh) {\n    invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');\n    return _objectSpread(_objectSpread({}, props), {}, {\n      refreshControl: props.refreshControl == null ? React.createElement(RefreshControl, {\n        refreshing: props.refreshing,\n        onRefresh: onRefresh,\n        progressViewOffset: props.progressViewOffset,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 54\n        }\n      }) : props.refreshControl\n    });\n  } else {\n    return props;\n  }\n}\n\nvar WrappedFlatList = React.forwardRef(function (props, ref) {\n  return React.createElement(FlatList, _extends({\n    ref: ref\n  }, props, {\n    renderScrollComponent: function renderScrollComponent(props) {\n      return React.createElement(WrappedScrollView, _extends({}, propsMaybeWithRefreshControl(props), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 121\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 58\n    }\n  }));\n});\nvar WrappedSectionList = React.forwardRef(function (props, ref) {\n  return React.createElement(SectionList, _extends({\n    ref: ref\n  }, props, {\n    renderScrollComponent: function renderScrollComponent(props) {\n      return React.createElement(WrappedScrollView, _extends({}, propsMaybeWithRefreshControl(props), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 127\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 61\n    }\n  }));\n});\nmodule.exports = {\n  ScrollView: WrappedScrollView,\n  FlatList: WrappedFlatList,\n  SectionList: WrappedSectionList\n};","map":{"version":3,"names":["React","ScrollView","GHScrollView","createNavigationAwareScrollable","invariant","WrappedScrollView","Platform","OS","propsMaybeWithRefreshControl","props","onRefresh","refreshing","JSON","stringify","refreshControl","progressViewOffset","WrappedFlatList","forwardRef","ref","WrappedSectionList","module","exports","FlatList","SectionList"],"sources":["C:/Users/Nikhil/Downloads/PRO-C83-ProjectTemplate-main/PRO-C83-ProjectTemplate-main/node_modules/@react-navigation/native/dist/Scrollables.js"],"sourcesContent":["import React from 'react';\nimport { ScrollView, Platform, FlatList, SectionList, RefreshControl } from 'react-native';\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from './createNavigationAwareScrollable';\nimport invariant from './utils/invariant';\n\nlet WrappedScrollView;\nif (Platform.OS === 'android') {\n  // @todo: use GHScrollView again when\n  // https://github.com/kmagiera/react-native-gesture-handler/issues/560 has\n  // been fixed.\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  const onRefresh = props.onRefresh;\n  if (onRefresh) {\n    invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');\n    return {\n      ...props,\n      refreshControl: props.refreshControl == null ? <RefreshControl refreshing={props.refreshing} onRefresh={onRefresh} progressViewOffset={props.progressViewOffset} /> : props.refreshControl\n    };\n  } else {\n    return props;\n  }\n}\n\nconst WrappedFlatList = React.forwardRef((props, ref) => <FlatList ref={ref} {...props} renderScrollComponent={props => <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />} />);\n\nconst WrappedSectionList = React.forwardRef((props, ref) => <SectionList ref={ref} {...props} renderScrollComponent={props => <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />} />);\n\n// eslint-disable-next-line import/no-commonjs\nmodule.exports = {\n  ScrollView: WrappedScrollView,\n  FlatList: WrappedFlatList,\n  SectionList: WrappedSectionList\n};"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAEA,SAASC,UAAU,IAAIC,YAAvB,QAA2C,8BAA3C;AACA,OAAOC,+BAAP;AACA,OAAOC,SAAP;AAEA,IAAIC,iBAAJ;;AACA,IAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;EAI7BF,iBAAiB,GAAGF,+BAA+B,CAACF,UAAD,CAAnD;AACD,CALD,MAKO;EACLI,iBAAiB,GAAGF,+BAA+B,CAACD,YAAD,CAAnD;AACD;;AAED,SAASM,4BAAT,CAAsCC,KAAtC,EAA6C;EAC3C,IAAMC,SAAS,GAAGD,KAAK,CAACC,SAAxB;;EACA,IAAIA,SAAJ,EAAe;IACbN,SAAS,CAAC,OAAOK,KAAK,CAACE,UAAb,KAA4B,SAA7B,EAAwC,sFAAsFC,IAAI,CAACC,SAAL,CAAeJ,KAAK,CAACE,UAArB,CAAtF,GAAyH,GAAjK,CAAT;IACA,uCACKF,KADL;MAEEK,cAAc,EAAEL,KAAK,CAACK,cAAN,IAAwB,IAAxB,GAA+B,oBAAC,cAAD;QAAgB,UAAU,EAAEL,KAAK,CAACE,UAAlC;QAA8C,SAAS,EAAED,SAAzD;QAAoE,kBAAkB,EAAED,KAAK,CAACM,kBAA9F;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAA/B,GAAsJN,KAAK,CAACK;IAF9K;EAID,CAND,MAMO;IACL,OAAOL,KAAP;EACD;AACF;;AAED,IAAMO,eAAe,GAAGhB,KAAK,CAACiB,UAAN,CAAiB,UAACR,KAAD,EAAQS,GAAR;EAAA,OAAgB,oBAAC,QAAD;IAAU,GAAG,EAAEA;EAAf,GAAwBT,KAAxB;IAA+B,qBAAqB,EAAE,+BAAAA,KAAK;MAAA,OAAI,oBAAC,iBAAD,eAAuBD,4BAA4B,CAACC,KAAD,CAAnD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAAJ;IAAA,CAA3D;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAhB;AAAA,CAAjB,CAAxB;AAEA,IAAMU,kBAAkB,GAAGnB,KAAK,CAACiB,UAAN,CAAiB,UAACR,KAAD,EAAQS,GAAR;EAAA,OAAgB,oBAAC,WAAD;IAAa,GAAG,EAAEA;EAAlB,GAA2BT,KAA3B;IAAkC,qBAAqB,EAAE,+BAAAA,KAAK;MAAA,OAAI,oBAAC,iBAAD,eAAuBD,4BAA4B,CAACC,KAAD,CAAnD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAAJ;IAAA,CAA9D;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAhB;AAAA,CAAjB,CAA3B;AAGAW,MAAM,CAACC,OAAP,GAAiB;EACfpB,UAAU,EAAEI,iBADG;EAEfiB,QAAQ,EAAEN,eAFK;EAGfO,WAAW,EAAEJ;AAHE,CAAjB"},"metadata":{},"sourceType":"module"}